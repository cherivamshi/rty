const handleInputChange = (e) => {
  const { id, value, type } = e.target;

  // Handling "year" selection
  if (id === "year") {
    setWave(wavesByYear[value]);

    // Extract market codes based on the selected year
    const allMarketCodes = data
      .filter((item) => item.YEAR === value)
      .flatMap((item) => item.MARKET_CODES.split(',').map((code) => code.trim()));

    const uniqueMarketCodes = Array.from(new Set(allMarketCodes));
    const codes = uniqueMarketCodes.map((code) => ({
      name: code,
      value: code,
    }));

    console.log(codes); // Debug log for extracted codes
    setMarket(codes);

    // Update formData state for "markets" field
    setFormData((prevFormData) => ({
      ...prevFormData,
      markets: [],
    }));
    return;
  }

  // Handling "markets" selection (including "select_all" and "clear_all")
  if (id === "markets") {
    let updatedMarkets = [...(formData.markets || [])];

    if (value.includes("clear_all")) {
      updatedMarkets = []; // Clear all selections
    } else if (value.includes("select_all")) {
      updatedMarkets = market.map((item) => item.name); // Select all markets
    } else {
      // Toggle individual market selection
      updatedMarkets = updatedMarkets.includes(value)
        ? updatedMarkets.filter((market) => market !== value)
        : [...updatedMarkets, value];
    }

    // Update formData with the new selection
    setFormData((prevFormData) => ({
      ...prevFormData,
      markets: updatedMarkets,
    }));
    console.log("Updated Markets:", updatedMarkets); // Debug log for selected markets
  }
};
const handleInputChange = (e) => {
  const { id, value, type } = e.target;

  // Handling "year" selection
  if (id === "year") {
    setWave(wavesByYear[value]);

    // Extract market codes based on the selected year
    const allMarketCodes = data
      .filter((item) => item.YEAR === value)
      .flatMap((item) => item.MARKET_CODES.split(',').map((code) => code.trim()));

    const uniqueMarketCodes = Array.from(new Set(allMarketCodes));
    const codes = uniqueMarketCodes.map((code) => ({
      name: code,
      value: code,
    }));

    console.log(codes); // Debug log for extracted codes
    setMarket(codes);

    // Update formData state for "markets" field
    setFormData((prevFormData) => ({
      ...prevFormData,
      markets: [],
    }));
    return;
  }

  // Handling "markets" selection (including "select_all" and "clear_all")
  if (id === "markets") {
    let updatedMarkets = [...(formData.markets || [])];

    if (value.includes("clear_all")) {
      updatedMarkets = []; // Clear all selections
    } else if (value.includes("select_all")) {
      updatedMarkets = market.map((item) => item.name); // Select all markets
    } else {
      // Toggle individual market selection
      updatedMarkets = updatedMarkets.includes(value)
        ? updatedMarkets.filter((market) => market !== value)
        : [...updatedMarkets, value];
    }

    // Update formData with the new selection
    setFormData((prevFormData) => ({
      ...prevFormData,
      markets: updatedMarkets,
    }));
    console.log("Updated Markets:", updatedMarkets); // Debug log for selected markets
  }
};
